//  Generated on <$_SCRIBE_DATE$>
//
//  Created by Sam Gateau on 6/7/16.
//  Copyright 2016 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@func declareBlurUniforms()@>

#define NUM_TAPS 7
#define NUM_TAPS_OFFSET 3.0f

float uniformFilterWidth = 0.05f;

const float gaussianDistributionCurve[NUM_TAPS] = float[](
    0.383f, 0.006f, 0.061f, 0.242f, 0.242f, 0.061f, 0.006f
);
const float gaussianDistributionOffset[NUM_TAPS] = float[](
    0.0f,  -3.0f,  -2.0f,  -1.0f,   1.0f,   2.0f,   3.0f
);

struct BlurParameters {
    vec4 resolutionInfo;
    vec4 texcoordTransform;
    vec4 filterInfo;
    vec4 depthInfo;
    vec4 stereoInfo;
    vec4 linearDepthInfo;
};

uniform blurParamsBuffer {
    BlurParameters parameters;
};

vec2 getViewportInvWidthHeight() {
    return parameters.resolutionInfo.zw;
}

vec2 evalTexcoordTransformed(vec2 texcoord) {
    return (texcoord * parameters.texcoordTransform.zw + parameters.texcoordTransform.xy);
}

float getFilterScale() {
    return parameters.filterInfo.x;
}


float getDepthThreshold() {
    return parameters.depthInfo.x;
}

float getDepthPerspective() {
    return parameters.depthInfo.w;
}

float getPosLinearDepthFar() {
    return parameters.linearDepthInfo.x;
}

<@endfunc@>


<@func declareBlurGaussian()@>

<$declareBlurUniforms()$>

uniform sampler2D sourceMap;

vec4 pixelShaderGaussian(vec2 texcoord, vec2 direction, vec2 pixelStep) {
    texcoord = evalTexcoordTransformed(texcoord);
    vec4 sampleCenter = texture(sourceMap, texcoord);

    vec2 finalStep = getFilterScale() * direction * pixelStep;
    vec4 srcBlurred = vec4(0.0);
    
    for(int i = 0; i < NUM_TAPS; i++) {
        // Fetch color and depth for current sample.
        vec2 sampleCoord = texcoord + (gaussianDistributionOffset[i] * finalStep);
        vec4 srcSample = texture(sourceMap, sampleCoord);
        // Accumulate.
        srcBlurred += gaussianDistributionCurve[i] * srcSample;
    }
    
    return srcBlurred;
}

<@endfunc@>

<@func declareBlurGaussianDepthAware()@>

<$declareBlurUniforms()$>

uniform sampler2D sourceMap;
uniform sampler2D depthMap;

#define NUM_HALF_TAPS 4

const float gaussianDistributionCurveHalf[NUM_HALF_TAPS] = float[](
    0.383f, 0.242f, 0.061f, 0.006f
);
const float gaussianDistributionOffsetHalf[NUM_HALF_TAPS] = float[](
    0.0f,  1.0f,   2.0f,   3.0f
);

vec4 pixelShaderGaussianDepthAware(vec2 texcoord, vec2 direction, vec2 pixelStep) {
    texcoord = evalTexcoordTransformed(texcoord);
    float sampleDepth = texture(depthMap, texcoord).x;
    if (sampleDepth >= getPosLinearDepthFar()) {
        discard;
    }
    vec4 sampleCenter = texture(sourceMap, texcoord);

    // Calculate the width scale.
    float distanceToProjectionWindow = getDepthPerspective();

    float depthThreshold = getDepthThreshold();

    // Calculate the final step to fetch the surrounding pixels.
    float filterScale = getFilterScale();
    float scale = distanceToProjectionWindow / sampleDepth;

    vec2 finalStep = filterScale * scale * direction * pixelStep;

    // Accumulate the center sample
    vec4 srcBlurred = gaussianDistributionCurve[0] * sampleCenter;

     for(int i = 1; i < NUM_TAPS; i++) {
        // Fetch color and depth for current sample.
        vec2 sampleCoord = texcoord + (gaussianDistributionOffset[i] * finalStep);
        float srcDepth = texture(depthMap, sampleCoord).x;
        vec4 srcSample = texture(sourceMap, sampleCoord);
       
        // If the difference in depth is huge, we lerp color back.
        float s = clamp(depthThreshold * distanceToProjectionWindow  * filterScale * abs(srcDepth - sampleDepth), 0.0, 1.0);
        srcSample = mix(srcSample, sampleCenter, s);

        // Accumulate.
        srcBlurred += gaussianDistributionCurve[i] * srcSample;
    }   

     /*
    for(int i = 1; i < NUM_HALF_TAPS; i++) {
        // Fetch color and depth for current sample.
        vec2 texcoordOffset = (gaussianDistributionOffsetHalf[i] * finalStep);
        
        float srcDepthN = texture(depthMap, texcoord - texcoordOffset).x;
        float srcDepthP = texture(depthMap, texcoord + texcoordOffset).x;
        vec4 srcSampleN = texture(sourceMap, texcoord - texcoordOffset);
        vec4 srcSampleP = texture(sourceMap, texcoord + texcoordOffset);
       
        // If the difference in depth is huge, we lerp color back.
        float sN = clamp(depthThreshold * distanceToProjectionWindow  * filterScale * abs(srcDepthN - sampleDepth), 0.0, 1.0);
        float sP = clamp(depthThreshold * distanceToProjectionWindow  * filterScale * abs(srcDepthP - sampleDepth), 0.0, 1.0);

        srcSampleN = mix(srcSampleN, sampleCenter, sN);
        srcSampleP = mix(srcSampleP, sampleCenter, sP);

        // Accumulate.
        srcBlurred += gaussianDistributionCurveHalf[i] * (srcSampleP + srcSampleN);
    }*/
    
    return srcBlurred;
}

<@endfunc@>
