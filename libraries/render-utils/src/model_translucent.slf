<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_translucent.frag
//  fragment shader
//
//  Created by Sam Gateau on 2/15/2016.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include model/Material.slh@>

<@include DeferredGlobalLight.slh@>
<$declareEvalAmbientSphereGlobalColor()$>

<@include gpu/Transform.slh@>
<$declareStandardCameraTransform()$>

uniform sampler2D albedoMap;

in vec2 _texCoord0;
in vec4 _position;
in vec3 _normal;
in vec3 _color;
in float _alpha;

out vec4 _fragColor;

void main(void) {
    vec4 albedo = texture(albedoMap, _texCoord0);

    Material mat = getMaterial();
    vec3 fragPosition = _position.xyz;
    vec3 fragNormal = normalize(_normal);
    vec3 fragAlbedo = getMaterialAlbedo(mat) * albedo.rgb * _color;
    float fragMetallic = getMaterialMetallic(mat);
    vec3 fragEmissive = getMaterialEmissive(mat);
    float fragRoughness = getMaterialRoughness(mat);
    float fragOpacity = getMaterialOpacity(mat) * albedo.a * _alpha;

    TransformCamera cam = getTransformCamera();

    _fragColor =  vec4(evalAmbientSphereGlobalColor(
        cam._viewInverse,
        1.0,
        1.0,
        fragPosition,
        fragNormal,
        fragAlbedo,
        fragMetallic,
        fragEmissive,
        fragRoughness),
        fragOpacity);
}
